using FormGenerator.Models;
using FormGenerator.Utilities;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FormGenerator.ServerDataAccess
{
    public static class ActionTypePropertiesRepository
    {
        public static readonly Dictionary<string, string> mappingDictionary = new Dictionary<string, string>()
        {
            {"ID","ID"},
            {"value","VALUE"},
            {"actionTypeID","ACTION_TYPE_ID"},
            {"actionKindPropertyID","ACTION_KIND_PROPERTY_ID"},
        };

        public static ResponseObjectPackage<List<ActionTypePropertyModel>> GetBySearchTemplate(RequestObjectPackage<ActionTypePropertySearchTemplate> request, IDbConnection connectionID)
        {
            ActionTypePropertySearchTemplate obj = request.requestData;
            string sql = string.Format(
                "select ID, \"VALUE\", ACTION_TYPE_ID, ACTION_KIND_PROPERTY_ID " + Environment.NewLine +
                "from ACTION_TYPE_PROPERTIES " + Environment.NewLine +
                "where {0}",
                    ToSqlWhere(obj)
            );

            List<ActionTypePropertyModel> list = DBOrmUtils.OpenSqlList<ActionTypePropertyModel>(sql, mappingDictionary, connectionID);
            return new ResponseObjectPackage<List<ActionTypePropertyModel>>() { resultData = list };
        }
        public static string ToSqlWhere(ActionTypePropertySearchTemplate obj)
        {
            string where = " 1 = 1";
            where += DBOrmUtils.GetSqlWhereFromNumber(obj.ID, "ID");
            where += DBOrmUtils.GetSqlWhereFromNumber(obj.value, "VALUE");
            where += DBOrmUtils.GetSqlWhereFromNumber(obj.actionTypeID, "ACTION_TYPE_ID");
            where += DBOrmUtils.GetSqlWhereFromNumber(obj.actionKindPropertyID, "ACTION_KIND_PROPERTY_ID");
            return where;
        }

        public static ResponsePackage Save(RequestObjectPackage<ActionTypePropertyModel> request, IDbConnection connectionID)
        {
            return Save(request, connectionID, null);
        }
        public static ResponsePackage Save(RequestObjectPackage<ActionTypePropertyModel> request, IDbConnection connectionID, IDbTransaction transactionID)
        {
            ActionTypePropertyModel obj = request.requestData;
            string sql = string.Empty;

            if (obj.ID > 0)
            {
                sql = string.Format(
                    " update ACTION_TYPE_PROPERTIES set \"VALUE\" = {0}, ACTION_TYPE_ID = {1}, ACTION_KIND_PROPERTY_ID = {2} " + Environment.NewLine +
                    " where ID = {3} returning ID",
                    SQL.FromNumber(obj.ID),
                    SQL.FromNumber(obj.actionTypeID),
                    SQL.FromNumber(obj.actionKindPropertyID),
                    SQL.FromNumber(obj.ID)
                );
            }
            else
            {
                sql = string.Format(
<<<<<<< HEAD
                    " insert into ACTION_TYPE_PROPERTIES (\"VALUE\", ACTION_TYPE_ID, ACTION_KIND_PROPERTY_ID) " + Environment.NewLine +
=======
                    " insert into ACTION_KINDS (\"VALUE\", ACTION_TYPE_ID, ACTION_KIND_PROPERTY_ID) " + Environment.NewLine +
>>>>>>> origin/master
                    " values ({0}, {1}, {2}) returning ID",
                    SQL.FromNumber(obj.ID),
                    SQL.FromNumber(obj.actionTypeID),
                    SQL.FromNumber(obj.actionKindPropertyID)
                );
            }
            ResponseTablePackage res = DBUtils.ExecuteSQL(sql, connectionID, true, transactionID);
            res.ThrowExceptionIfError();
            return new ResponsePackage() { resultID = res.resultID };
        }

        public static ResponsePackage Delete(RequestPackage request, IDbConnection connectionID)
        {
            return Delete(request, connectionID, null);
        }
        public static ResponsePackage Delete(RequestPackage request, IDbConnection connectionID, IDbTransaction transactionID)
        {
            int ID = request.requestID;
            string sql = string.Format(
                "delete from ACTION_TYPE_PROPERTIES" +
                "where ID = {0}",
                    ID
            );
            DBUtils.ExecuteSQL(sql, connectionID, false, transactionID).ThrowExceptionIfError();
            return new ResponsePackage();
        }
    }
}
